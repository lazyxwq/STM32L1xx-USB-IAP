L 1 "..\utility\xprintf.c"
N/*------------------------------------------------------------------------/
N/  Universal string handler for user console interface
N/-------------------------------------------------------------------------/
N/
N/  Copyright (C) 2011, ChaN, all right reserved.
N/
N/ * This software is a free software and there is NO WARRANTY.
N/ * No restriction on use. You can use, modify and redistribute it for
N/   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
N/ * Redistributions of source code must retain the above copyright notice.
N/
N/-------------------------------------------------------------------------*/
N
N#include "xprintf.h"
L 1 "..\utility\xprintf.h" 1
N/*------------------------------------------------------------------------*/
N/* Universal string handler for user console interface  (C)ChaN, 2011     */
N/*------------------------------------------------------------------------*/
N
N#ifndef _STRFUNC
N#define _STRFUNC
N
N#define _USE_XFUNC_OUT	1	/* 1: Use output functions */
N#define	_CR_CRLF		1	/* 1: Convert \n ==> \r\n in the output char */
N
N#define _USE_XFUNC_IN	1	/* 1: Use input function */
N#define	_LINE_ECHO		1	/* 1: Echo back input chars in xgets function */
N
N
N#if _USE_XFUNC_OUT
X#if 1
N#define xdev_out(func) xfunc_out = (void(*)(unsigned char))(func)
Nextern void (*xfunc_out)(unsigned char);
Nvoid xputc (char c);
Nvoid xputs (const char* str);
Nvoid xfputs (void (*func)(unsigned char), const char* str);
Nvoid xprintf (const char* fmt, ...);
Nvoid xsprintf (char* buff, const char* fmt, ...);
Nvoid xfprintf (void (*func)(unsigned char), const char*	fmt, ...);
Nvoid put_dump (const void* buff, unsigned long addr, int len, int width);
N#define DW_CHAR		sizeof(char)
N#define DW_SHORT	sizeof(short)
N#define DW_LONG		sizeof(long)
N#endif
N
N#if _USE_XFUNC_IN
X#if 1
N#define xdev_in(func) xfunc_in = (unsigned char(*)(void))(func)
Nextern unsigned char (*xfunc_in)(void);
Nint xgets (char* buff, int len);
Nint xfgets (unsigned char (*func)(void), char* buff, int len);
Nint xatoi (char** str, long* res);
N#endif
N
N#endif
N
L 15 "..\utility\xprintf.c" 2
N
N
N#if _USE_XFUNC_OUT
X#if 1
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5050041
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199409L)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 19 "..\utility\xprintf.c" 2
Nvoid (*xfunc_out)(unsigned char);	/* Pointer to the output stream */
Nstatic char *outptr;
N
N/*----------------------------------------------*/
N/* Put a character                              */
N/*----------------------------------------------*/
N
Nvoid xputc (char c)
N{
N	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
X	if (1 && c == '\n') xputc('\r');		 
N
N	if (outptr) {
N		*outptr++ = (unsigned char)c;
N		return;
N	}
N
N	if (xfunc_out) xfunc_out((unsigned char)c);
N}
N
N
N
N/*----------------------------------------------*/
N/* Put a null-terminated string                 */
N/*----------------------------------------------*/
N
Nvoid xputs (					/* Put a string to the default device */
N	const char* str				/* Pointer to the string */
N)
N{
N	while (*str)
N		xputc(*str++);
N}
N
N
Nvoid xfputs (					/* Put a string to the specified device */
N	void(*func)(unsigned char),	/* Pointer to the output function */
N	const char*	str				/* Pointer to the string */
N)
N{
N	void (*pf)(unsigned char);
N
N
N	pf = xfunc_out;		/* Save current output device */
N	xfunc_out = func;	/* Switch output to specified device */
N	while (*str)		/* Put the string */
N		xputc(*str++);
N	xfunc_out = pf;		/* Restore output device */
N}
N
N
N
N/*----------------------------------------------*/
N/* Formatted string output                      */
N/*----------------------------------------------*/
N/*  xprintf("%d", 1234);			"1234"
N    xprintf("%6d,%3d%%", -200, 5);	"  -200,  5%"
N    xprintf("%-6u", 100);			"100   "
N    xprintf("%ld", 12345678L);		"12345678"
N    xprintf("%04x", 0xA3);			"00a3"
N    xprintf("%08LX", 0x123ABC);		"00123ABC"
N    xprintf("%016b", 0x550F);		"0101010100001111"
N    xprintf("%s", "String");		"String"
N    xprintf("%-4s", "abc");			"abc "
N    xprintf("%4s", "abc");			" abc"
N    xprintf("%c", 'a');				"a"
N    xprintf("%f", 10.0);            <xprintf lacks floating point support>
N*/
N
Nstatic
Nvoid xvprintf (
N	const char*	fmt,	/* Pointer to the format string */
N	va_list arp			/* Pointer to arguments */
N)
N{
N	unsigned int r, i, j, w, f;
N	unsigned long v;
N	char s[16], c, d, *p;
N
N
N	for (;;) {
N		c = *fmt++;					/* Get a char */
N		if (!c) break;				/* End of format? */
N		if (c != '%') {				/* Pass through it if not a % sequense */
N			xputc(c); continue;
N		}
N		f = 0;
N		c = *fmt++;					/* Get first char of the sequense */
N		if (c == '0') {				/* Flag: '0' padded */
N			f = 1; c = *fmt++;
N		} else {
N			if (c == '-') {			/* Flag: left justified */
N				f = 2; c = *fmt++;
N			}
N		}
N		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
N			w = w * 10 + c - '0';
N		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
N			f |= 4; c = *fmt++;
N		}
N		if (!c) break;				/* End of format? */
N		d = c;
N		if (d >= 'a') d -= 0x20;
N		switch (d) {				/* Type is... */
N		case 'S' :					/* String */
N			p = va_arg(arp, char*);
X			p = __va_arg(arp, char*);
N			for (j = 0; p[j]; j++) ;
N			while (!(f & 2) && j++ < w) xputc(' ');
N			xputs(p);
N			while (j++ < w) xputc(' ');
N			continue;
N		case 'C' :					/* Character */
N			xputc((char)va_arg(arp, int)); continue;
X			xputc((char)__va_arg(arp, int)); continue;
N		case 'B' :					/* Binary */
N			r = 2; break;
N		case 'O' :					/* Octal */
N			r = 8; break;
N		case 'D' :					/* Signed decimal */
N		case 'U' :					/* Unsigned decimal */
N			r = 10; break;
N		case 'X' :					/* Hexdecimal */
N			r = 16; break;
N		default:					/* Unknown type (passthrough) */
N			xputc(c); continue;
N		}
N
N		/* Get an argument and put it in numeral */
N		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
X		v = (f & 4) ? __va_arg(arp, long) : ((d == 'D') ? (long)__va_arg(arp, int) : (long)__va_arg(arp, unsigned int));
N		if (d == 'D' && (v & 0x80000000)) {
N			v = 0 - v;
N			f |= 8;
N		}
N		i = 0;
N		do {
N			d = (char)(v % r); v /= r;
N			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
N			s[i++] = d + '0';
N		} while (v && i < sizeof(s));
N		if (f & 8) s[i++] = '-';
N		j = i; d = (f & 1) ? '0' : ' ';
N		while (!(f & 2) && j++ < w) xputc(d);
N		do xputc(s[--i]); while(i);
N		while (j++ < w) xputc(' ');
N	}
N}
N
N
Nvoid xprintf (			/* Put a formatted string to the default device */
N	const char*	fmt,	/* Pointer to the format string */
N	...					/* Optional arguments */
N)
N{
N	va_list arp;
N
N
N	va_start(arp, fmt);
X	__va_start(arp, fmt);
N	xvprintf(fmt, arp);
N	va_end(arp);
X	__va_end(arp);
N}
N
N
Nvoid xsprintf (			/* Put a formatted string to the memory */
N	char* buff,			/* Pointer to the output buffer */
N	const char*	fmt,	/* Pointer to the format string */
N	...					/* Optional arguments */
N)
N{
N	va_list arp;
N
N
N	outptr = buff;		/* Switch destination for memory */
N
N	va_start(arp, fmt);
X	__va_start(arp, fmt);
N	xvprintf(fmt, arp);
N	va_end(arp);
X	__va_end(arp);
N
N	*outptr = 0;		/* Terminate output string with a \0 */
N	outptr = 0;			/* Switch destination for device */
N}
N
N
Nvoid xfprintf (					/* Put a formatted string to the specified device */
N	void(*func)(unsigned char),	/* Pointer to the output function */
N	const char*	fmt,			/* Pointer to the format string */
N	...							/* Optional arguments */
N)
N{
N	va_list arp;
N	void (*pf)(unsigned char);
N
N
N	pf = xfunc_out;		/* Save current output device */
N	xfunc_out = func;	/* Switch output to specified device */
N
N	va_start(arp, fmt);
X	__va_start(arp, fmt);
N	xvprintf(fmt, arp);
N	va_end(arp);
X	__va_end(arp);
N
N	xfunc_out = pf;		/* Restore output device */
N}
N
N
N
N/*----------------------------------------------*/
N/* Dump a line of binary dump                   */
N/*----------------------------------------------*/
N
Nvoid put_dump (
N	const void* buff,		/* Pointer to the array to be dumped */
N	unsigned long addr,		/* Heading address value */
N	int len,				/* Number of items to be dumped */
N	int width				/* Size of the items (DF_CHAR, DF_SHORT, DF_LONG) */
N)
N{
N	int i;
N	const unsigned char *bp;
N	const unsigned short *sp;
N	const unsigned long *lp;
N
N
N	xprintf("%08lX ", addr);		/* address */
N
N	switch (width) {
N	case DW_CHAR:
X	case sizeof(char):
N		bp = buff;
N		for (i = 0; i < len; i++)		/* Hexdecimal dump */
N			xprintf(" %02X", bp[i]);
N		xputc(' ');
N		for (i = 0; i < len; i++)		/* ASCII dump */
N			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
N		break;
N	case DW_SHORT:
X	case sizeof(short):
N		sp = buff;
N		do								/* Hexdecimal dump */
N			xprintf(" %04X", *sp++);
N		while (--len);
N		break;
N	case DW_LONG:
X	case sizeof(long):
N		lp = buff;
N		do								/* Hexdecimal dump */
N			xprintf(" %08LX", *lp++);
N		while (--len);
N		break;
N	}
N
N	xputc('\n');
N}
N
N#endif /* _USE_XFUNC_OUT */
N
N
N
N#if _USE_XFUNC_IN
X#if 1
Nunsigned char (*xfunc_in)(void);	/* Pointer to the input stream */
N
N/*----------------------------------------------*/
N/* Get a line from the input                    */
N/*----------------------------------------------*/
N
Nint xgets (		/* 0:End of stream, 1:A line arrived */
N	char* buff,	/* Pointer to the buffer */
N	int len		/* Buffer length */
N)
N{
N	int c, i;
N
N
N	if (!xfunc_in) return 0;		/* No input function specified */
N
N	i = 0;
N	for (;;) {
N		c = xfunc_in();				/* Get a char from the incoming stream */
N		if (!c) return 0;			/* End of stream? */
N		if (c == '\r') break;		/* End of line? */
N		if (c == '\b' && i) {		/* Back space? */
N			i--;
N			if (_LINE_ECHO) xputc(c);
X			if (1) xputc(c);
N			continue;
N		}
N		if (c >= ' ' && i < len - 1) {	/* Visible chars */
N			buff[i++] = c;
N			if (_LINE_ECHO) xputc(c);
X			if (1) xputc(c);
N		}
N	}
N	buff[i] = 0;	/* Terminate with a \0 */
N	if (_LINE_ECHO) xputc('\n');
X	if (1) xputc('\n');
N	return 1;
N}
N
N
Nint xfgets (	/* 0:End of stream, 1:A line arrived */
N	unsigned char (*func)(void),	/* Pointer to the input stream function */
N	char* buff,	/* Pointer to the buffer */
N	int len		/* Buffer length */
N)
N{
N	unsigned char (*pf)(void);
N	int n;
N
N
N	pf = xfunc_in;			/* Save current input device */
N	xfunc_in = func;		/* Switch input to specified device */
N	n = xgets(buff, len);	/* Get a line */
N	xfunc_in = pf;			/* Restore input device */
N
N	return n;
N}
N
N
N/*----------------------------------------------*/
N/* Get a value of the string                    */
N/*----------------------------------------------*/
N/*	"123 -5   0x3ff 0b1111 0377  w "
N	    ^                           1st call returns 123 and next ptr
N	       ^                        2nd call returns -5 and next ptr
N                   ^                3rd call returns 1023 and next ptr
N                          ^         4th call returns 15 and next ptr
N                               ^    5th call returns 255 and next ptr
N                                  ^ 6th call fails and returns 0
N*/
N
Nint xatoi (			/* 0:Failed, 1:Successful */
N	char **str,		/* Pointer to pointer to the string */
N	long *res		/* Pointer to the valiable to store the value */
N)
N{
N	unsigned long val;
N	unsigned char c, r, s = 0;
N
N
N	*res = 0;
N
N	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
N
N	if (c == '-') {		/* negative? */
N		s = 1;
N		c = *(++(*str));
N	}
N
N	if (c == '0') {
N		c = *(++(*str));
N		switch (c) {
N		case 'x':		/* hexdecimal */
N			r = 16; c = *(++(*str));
N			break;
N		case 'b':		/* binary */
N			r = 2; c = *(++(*str));
N			break;
N		default:
N			if (c <= ' ') return 1;	/* single zero */
N			if (c < '0' || c > '9') return 0;	/* invalid char */
N			r = 8;		/* octal */
N		}
N	} else {
N		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
N		r = 10;			/* decimal */
N	}
N
N	val = 0;
N	while (c > ' ') {
N		if (c >= 'a') c -= 0x20;
N		c -= '0';
N		if (c >= 17) {
N			c -= 7;
N			if (c <= 9) return 0;	/* invalid char */
N		}
N		if (c >= r) return 0;		/* invalid char for current radix */
N		val = val * r + c;
N		c = *(++(*str));
N	}
N	if (s) val = 0 - val;			/* apply sign if needed */
N
N	*res = val;
N	return 1;
N}
N
N#endif /* _USE_XFUNC_IN */
