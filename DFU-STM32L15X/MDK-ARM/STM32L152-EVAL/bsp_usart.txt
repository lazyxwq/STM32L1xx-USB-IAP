; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\bsp_usart.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\bsp_usart.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\utility -I..\User\inc -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I"E:\my code\IAP\DFU-STM32L15X\MDK-ARM\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32L1xx_DFP\1.0.2\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\bsp_usart.crf ..\utility\bsp_usart.c]
                          THUMB

                          AREA ||i.USART1_getch||, CODE, READONLY, ALIGN=2

                  USART1_getch PROC
;;;8      
;;;9      int USART1_getch(void)
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11         int value;
;;;12     	
;;;13         /* Loop until the USARTz Receive Data Register is not empty */
;;;14         while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET) {
000002  4c06              LDR      r4,|L1.28|
                  |L1.4|
000004  2120              MOVS     r1,#0x20
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       USART_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L1.4|
;;;15         }
;;;16         value = (USART_ReceiveData(USART1) & 0x7F);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USART_ReceiveData
000016  f000007f          AND      r0,r0,#0x7f
;;;17         return value;
;;;18     }
00001a  bd10              POP      {r4,pc}
;;;19     
                          ENDP

                  |L1.28|
                          DCD      0x40013800

                          AREA ||i.USART1_init||, CODE, READONLY, ALIGN=2

                  USART1_init PROC
;;;19     
;;;20     void USART1_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;21     {	
;;;22     	USART_InitTypeDef USART_InitStructure;
;;;23     	GPIO_InitTypeDef GPIO_InitStructure;
;;;24     
;;;25     	/* Enable GPIO clock */
;;;26     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  b086              SUB      sp,sp,#0x18           ;21
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;27     
;;;28     	/* Enable USART clock */
;;;29     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;30     
;;;31     	USART_DeInit(USART1);
000014  4d24              LDR      r5,|L2.168|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       USART_DeInit
;;;32     	/* Configure USART Tx and Rx as alternate function push-pull */
;;;33     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001c  2002              MOVS     r0,#2
00001e  f88d0004          STRB     r0,[sp,#4]
;;;34     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
000022  2003              MOVS     r0,#3
000024  f88d0005          STRB     r0,[sp,#5]
;;;35     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000028  2400              MOVS     r4,#0
00002a  f88d4006          STRB     r4,[sp,#6]
;;;36     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00002e  2001              MOVS     r0,#1
000030  f88d0007          STRB     r0,[sp,#7]
;;;37     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000034  0240              LSLS     r0,r0,#9
;;;38     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000036  4e1d              LDR      r6,|L2.172|
000038  9000              STR      r0,[sp,#0]
00003a  4669              MOV      r1,sp
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GPIO_Init
;;;39     
;;;40     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000042  1528              ASRS     r0,r5,#20
;;;41     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  9000              STR      r0,[sp,#0]
000046  4669              MOV      r1,sp
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       GPIO_Init
;;;42     
;;;43     	/* Connect PXx to USARTx_Tx */
;;;44     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
00004e  2207              MOVS     r2,#7
000050  2109              MOVS     r1,#9
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;45     
;;;46     	/* Connect PXx to USARTx_Rx */
;;;47     	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
000058  2207              MOVS     r2,#7
00005a  210a              MOVS     r1,#0xa
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;48     
;;;49     	/* USART1 configuration ----------------------------------------------------*/
;;;50     	/* USART1 configured as follow:
;;;51     	- BaudRate = 115200 baud  
;;;52     	- Word Length = 8 Bits
;;;53     	- One Stop Bit
;;;54     	- No parity
;;;55     	- Hardware flow control disabled (RTS and CTS signals)
;;;56     	- Receive and transmit enabled
;;;57     	*/
;;;58     	USART_InitStructure.USART_BaudRate = 115200;
000062  f44f30e1          MOV      r0,#0x1c200
;;;59     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000066  9002              STR      r0,[sp,#8]
;;;60     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;61     	USART_InitStructure.USART_Parity = USART_Parity_No;
000068  f8ad4010          STRH     r4,[sp,#0x10]
;;;62     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;63     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00006c  200c              MOVS     r0,#0xc
00006e  f8ad400c          STRH     r4,[sp,#0xc]          ;59
000072  f8ad0012          STRH     r0,[sp,#0x12]
000076  f8ad400e          STRH     r4,[sp,#0xe]          ;60
00007a  f8ad4014          STRH     r4,[sp,#0x14]         ;62
;;;64     	USART_Init(USART1, &USART_InitStructure);
00007e  a902              ADD      r1,sp,#8
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       USART_Init
;;;65     
;;;66     	/* Enable USART */
;;;67     	USART_Cmd(USART1, ENABLE);
000086  2101              MOVS     r1,#1
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       USART_Cmd
;;;68     	USART_ClearFlag(USART1, USART_FLAG_TC);
00008e  2140              MOVS     r1,#0x40
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       USART_ClearFlag
;;;69     
;;;70     	//use xprintf functions
;;;71         xdev_out(USART1_putc);
000096  4907              LDR      r1,|L2.180|
000098  4805              LDR      r0,|L2.176|
;;;72         xdev_in(USART1_getch);
00009a  6008              STR      r0,[r1,#0]  ; xfunc_out
00009c  4907              LDR      r1,|L2.188|
00009e  4806              LDR      r0,|L2.184|
0000a0  6008              STR      r0,[r1,#0]  ; xfunc_in
;;;73     }
0000a2  b006              ADD      sp,sp,#0x18
0000a4  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      0x40013800
                  |L2.172|
                          DCD      0x40020000
                  |L2.176|
                          DCD      USART1_putc
                  |L2.180|
                          DCD      xfunc_out
                  |L2.184|
                          DCD      USART1_getch
                  |L2.188|
                          DCD      xfunc_in

                          AREA ||i.USART1_putc||, CODE, READONLY, ALIGN=2

                  USART1_putc PROC
;;;2      
;;;3      void USART1_putc(char  value)
000000  b570              PUSH     {r4-r6,lr}
;;;4      {
;;;5          while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
000002  4c07              LDR      r4,|L3.32|
000004  4605              MOV      r5,r0                 ;4
                  |L3.6|
000006  2140              MOVS     r1,#0x40
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L3.6|
;;;6          USART_SendData(USART1, value);   
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      USART_SendData
;;;7      }
;;;8      
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40013800

;*** Start embedded assembler ***

#line 1 "..\\utility\\bsp_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_usart_c_eab5d9bf____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_usart_c_eab5d9bf____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_usart_c_eab5d9bf____REVSH|
#line 128
|__asm___11_bsp_usart_c_eab5d9bf____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
