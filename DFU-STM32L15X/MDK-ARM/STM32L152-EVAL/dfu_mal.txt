; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\dfu_mal.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\dfu_mal.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\utility -I..\User\inc -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I"E:\my code\IAP\DFU-STM32L15X\MDK-ARM\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32L1xx_DFP\1.0.2\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\dfu_mal.crf ..\User\src\dfu_mal.c]
                          THUMB

                          AREA ||i.MAL_Erase||, CODE, READONLY, ALIGN=2

                  MAL_Erase PROC
;;;102    *******************************************************************************/
;;;103    uint16_t MAL_Erase(uint32_t SectorAddress)
000000  f000417c          AND      r1,r0,#0xfc000000
;;;104    {
;;;105    	switch (SectorAddress & MAL_MASK)
000004  f1b16f00          CMP      r1,#0x8000000
000008  d001              BEQ      |L1.14|
;;;106    	{
;;;107    		case INTERNAL_FLASH_BASE:
;;;108    			pMAL_Erase = FLASH_If_Erase;
;;;109    			break;
;;;110    		default:
;;;111    			return MAL_FAIL;
00000a  2001              MOVS     r0,#1
;;;112    	}
;;;113    	return pMAL_Erase(SectorAddress);
;;;114    }
00000c  4770              BX       lr
                  |L1.14|
00000e  4903              LDR      r1,|L1.28|
000010  4a01              LDR      r2,|L1.24|
000012  600a              STR      r2,[r1,#0]            ;113  ; pMAL_Erase
000014  f7ffbffe          B.W      FLASH_If_Erase
;;;115    
                          ENDP

                  |L1.24|
                          DCD      FLASH_If_Erase
                  |L1.28|
                          DCD      ||area_number.11||

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                  MAL_GetStatus PROC
;;;162    *******************************************************************************/
;;;163    uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
000000  f3c06381          UBFX     r3,r0,#26,#2
;;;164    {
;;;165    	uint8_t x = (SectorAddress  >> 26) & 0x03 ; /* 0x000000000 --> 0 */
;;;166    	/* 0x640000000 --> 1 */
;;;167    	/* 0x080000000 --> 2 */
;;;168    
;;;169    	uint8_t y = Cmd & 0x01;
000004  f0010001          AND      r0,r1,#1
;;;170    	SET_POLLING_TIMING(TimingTable[x][y]);  /* x: Erase/Write Timing */
000008  4906              LDR      r1,|L2.36|
00000a  eb010183          ADD      r1,r1,r3,LSL #2
00000e  f8113010          LDRB     r3,[r1,r0,LSL #1]
000012  7053              STRB     r3,[r2,#1]
000014  f8310010          LDRH     r0,[r1,r0,LSL #1]
000018  0a00              LSRS     r0,r0,#8
00001a  7090              STRB     r0,[r2,#2]
00001c  2000              MOVS     r0,#0
00001e  70d0              STRB     r0,[r2,#3]
;;;171    	/* y: Media              */
;;;172    	return MAL_OK;
;;;173    }
000020  4770              BX       lr
;;;174    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.constdata||

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=1

                  MAL_Init PROC
;;;89     *******************************************************************************/
;;;90     uint16_t MAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     	FLASH_If_Init(); /* Internal Flash */
000002  f7fffffe          BL       FLASH_If_Init
;;;93     	return MAL_OK;
000006  2000              MOVS     r0,#0
;;;94     }
000008  bd10              POP      {r4,pc}
;;;95     
                          ENDP


                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                  MAL_Read PROC
;;;142    *******************************************************************************/
;;;143    uint8_t *MAL_Read (uint32_t SectorAddress, uint32_t DataLength)
000000  f000427c          AND      r2,r0,#0xfc000000
;;;144    {
;;;145    	switch (SectorAddress & MAL_MASK)
000004  f1b26f00          CMP      r2,#0x8000000
000008  d001              BEQ      |L4.14|
;;;146    	{
;;;147    		case INTERNAL_FLASH_BASE:
;;;148    			pMAL_Read = FLASH_If_Read;
;;;149    			break;
;;;150    		default:
;;;151    			return 0;
00000a  2000              MOVS     r0,#0
;;;152    	}
;;;153    	return pMAL_Read (SectorAddress, DataLength);
;;;154    }
00000c  4770              BX       lr
                  |L4.14|
00000e  4a03              LDR      r2,|L4.28|
000010  4b01              LDR      r3,|L4.24|
000012  6093              STR      r3,[r2,#8]            ;153  ; pMAL_Read
000014  f7ffbffe          B.W      FLASH_If_Read
;;;155    
                          ENDP

                  |L4.24|
                          DCD      FLASH_If_Read
                  |L4.28|
                          DCD      ||area_number.11||

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                  MAL_Write PROC
;;;122    *******************************************************************************/
;;;123    uint16_t MAL_Write (uint32_t SectorAddress, uint32_t DataLength)
000000  f000427c          AND      r2,r0,#0xfc000000
;;;124    {
;;;125    	switch (SectorAddress & MAL_MASK)
000004  f1b26f00          CMP      r2,#0x8000000
000008  d001              BEQ      |L5.14|
;;;126    	{
;;;127    		case INTERNAL_FLASH_BASE:
;;;128    			pMAL_Write = FLASH_If_Write;
;;;129    			break;
;;;130    		default:
;;;131    			return MAL_FAIL;
00000a  2001              MOVS     r0,#1
;;;132    	}
;;;133    	return pMAL_Write(SectorAddress, DataLength);
;;;134    }
00000c  4770              BX       lr
                  |L5.14|
00000e  4a03              LDR      r2,|L5.28|
000010  4b01              LDR      r3,|L5.24|
000012  6053              STR      r3,[r2,#4]            ;133  ; pMAL_Write
000014  f7ffbffe          B.W      FLASH_If_Write
;;;135    
                          ENDP

                  |L5.24|
                          DCD      FLASH_If_Write
                  |L5.28|
                          DCD      ||area_number.11||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MAL_Buffer
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  TimingTable
000000  0bb80014          DCW      0x0bb8,0x0014
000004  03e80019          DCW      0x03e8,0x0019
000008  00640068          DCW      0x0064,0x0068
00000c  03e80019          DCW      0x03e8,0x0019
000010  03e8002d          DCW      0x03e8,0x002d

                          AREA ||.data||, DATA, ALIGN=2

                  pMAL_Init
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  pMAL_Erase
                          DCD      0x00000000
                  pMAL_Write
                          DCD      0x00000000
                  pMAL_Read
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\src\\dfu_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_dfu_mal_c_MAL_Init____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REVSH|
#line 128
|__asm___9_dfu_mal_c_MAL_Init____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
