; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\xprintf.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\xprintf.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\utility -I..\User\inc -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I"E:\my code\IAP\DFU-STM32L15X\MDK-ARM\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32L1xx_DFP\1.0.2\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL --omf_browse=.\stm32l152-eval\xprintf.crf ..\utility\xprintf.c]
                          THUMB

                          AREA ||i.put_dump||, CODE, READONLY, ALIGN=2

                  put_dump PROC
;;;224    
;;;225    void put_dump (
000000  b570              PUSH     {r4-r6,lr}
;;;226    	const void* buff,		/* Pointer to the array to be dumped */
;;;227    	unsigned long addr,		/* Heading address value */
;;;228    	int len,				/* Number of items to be dumped */
;;;229    	int width				/* Size of the items (DF_CHAR, DF_SHORT, DF_LONG) */
;;;230    )
;;;231    {
000002  4604              MOV      r4,r0
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
;;;232    	int i;
;;;233    	const unsigned char *bp;
;;;234    	const unsigned short *sp;
;;;235    	const unsigned long *lp;
;;;236    
;;;237    
;;;238    	xprintf("%08lX ", addr);		/* address */
000008  a01b              ADR      r0,|L1.120|
00000a  f7fffffe          BL       xprintf
;;;239    
;;;240    	switch (width) {
00000e  2e01              CMP      r6,#1
000010  d004              BEQ      |L1.28|
000012  2e02              CMP      r6,#2
000014  d01d              BEQ      |L1.82|
000016  2e04              CMP      r6,#4
000018  d129              BNE      |L1.110|
00001a  e022              B        |L1.98|
                  |L1.28|
;;;241    	case DW_CHAR:
;;;242    		bp = buff;
00001c  4626              MOV      r6,r4
;;;243    		for (i = 0; i < len; i++)		/* Hexdecimal dump */
00001e  2400              MOVS     r4,#0
000020  e004              B        |L1.44|
                  |L1.34|
;;;244    			xprintf(" %02X", bp[i]);
000022  5d31              LDRB     r1,[r6,r4]
000024  a016              ADR      r0,|L1.128|
000026  f7fffffe          BL       xprintf
00002a  1c64              ADDS     r4,r4,#1
                  |L1.44|
00002c  42ac              CMP      r4,r5                 ;243
00002e  dbf8              BLT      |L1.34|
;;;245    		xputc(' ');
000030  2020              MOVS     r0,#0x20
000032  f7fffffe          BL       xputc
;;;246    		for (i = 0; i < len; i++)		/* ASCII dump */
000036  2400              MOVS     r4,#0
000038  e008              B        |L1.76|
                  |L1.58|
;;;247    			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
00003a  5d30              LDRB     r0,[r6,r4]
00003c  f1a00120          SUB      r1,r0,#0x20
000040  295e              CMP      r1,#0x5e
000042  d900              BLS      |L1.70|
000044  202e              MOVS     r0,#0x2e
                  |L1.70|
000046  f7fffffe          BL       xputc
00004a  1c64              ADDS     r4,r4,#1
                  |L1.76|
00004c  42ac              CMP      r4,r5                 ;246
00004e  dbf4              BLT      |L1.58|
000050  e00d              B        |L1.110|
                  |L1.82|
;;;248    		break;
;;;249    	case DW_SHORT:
;;;250    		sp = buff;
;;;251    		do								/* Hexdecimal dump */
;;;252    			xprintf(" %04X", *sp++);
000052  f8341b02          LDRH     r1,[r4],#2
000056  a00c              ADR      r0,|L1.136|
000058  f7fffffe          BL       xprintf
00005c  1e6d              SUBS     r5,r5,#1
;;;253    		while (--len);
00005e  d1f8              BNE      |L1.82|
000060  e005              B        |L1.110|
                  |L1.98|
;;;254    		break;
;;;255    	case DW_LONG:
;;;256    		lp = buff;
;;;257    		do								/* Hexdecimal dump */
;;;258    			xprintf(" %08LX", *lp++);
000062  cc02              LDM      r4!,{r1}
000064  a00a              ADR      r0,|L1.144|
000066  f7fffffe          BL       xprintf
00006a  1e6d              SUBS     r5,r5,#1
;;;259    		while (--len);
00006c  d1f9              BNE      |L1.98|
                  |L1.110|
;;;260    		break;
;;;261    	}
;;;262    
;;;263    	xputc('\n');
00006e  e8bd4070          POP      {r4-r6,lr}
000072  200a              MOVS     r0,#0xa
000074  f7ffbffe          B.W      xputc
;;;264    }
;;;265    
                          ENDP

                  |L1.120|
000078  2530386c          DCB      "%08lX ",0
00007c  582000  
00007f  00                DCB      0
                  |L1.128|
000080  20253032          DCB      " %02X",0
000084  5800    
000086  00                DCB      0
000087  00                DCB      0
                  |L1.136|
000088  20253034          DCB      " %04X",0
00008c  5800    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L1.144|
000090  20253038          DCB      " %08LX",0
000094  4c5800  
000097  00                DCB      0

                          AREA ||i.xatoi||, CODE, READONLY, ALIGN=1

                  xatoi PROC
;;;338    
;;;339    int xatoi (			/* 0:Failed, 1:Successful */
000000  b530              PUSH     {r4,r5,lr}
;;;340    	char **str,		/* Pointer to pointer to the string */
;;;341    	long *res		/* Pointer to the valiable to store the value */
;;;342    )
;;;343    {
;;;344    	unsigned long val;
;;;345    	unsigned char c, r, s = 0;
000002  2500              MOVS     r5,#0
;;;346    
;;;347    
;;;348    	*res = 0;
;;;349    
;;;350    	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
000004  600d              STR      r5,[r1,#0]
000006  6803              LDR      r3,[r0,#0]            ;343
000008  e001              B        |L2.14|
                  |L2.10|
00000a  1c5b              ADDS     r3,r3,#1              ;343
00000c  6003              STR      r3,[r0,#0]
                  |L2.14|
00000e  781a              LDRB     r2,[r3,#0]
000010  2a20              CMP      r2,#0x20
000012  d0fa              BEQ      |L2.10|
;;;351    
;;;352    	if (c == '-') {		/* negative? */
000014  2a2d              CMP      r2,#0x2d
000016  d103              BNE      |L2.32|
;;;353    		s = 1;
000018  2501              MOVS     r5,#1
;;;354    		c = *(++(*str));
00001a  1c5a              ADDS     r2,r3,#1
00001c  6002              STR      r2,[r0,#0]
00001e  785a              LDRB     r2,[r3,#1]
                  |L2.32|
;;;355    	}
;;;356    
;;;357    	if (c == '0') {
000020  2a30              CMP      r2,#0x30
000022  d006              BEQ      |L2.50|
;;;358    		c = *(++(*str));
;;;359    		switch (c) {
;;;360    		case 'x':		/* hexdecimal */
;;;361    			r = 16; c = *(++(*str));
;;;362    			break;
;;;363    		case 'b':		/* binary */
;;;364    			r = 2; c = *(++(*str));
;;;365    			break;
;;;366    		default:
;;;367    			if (c <= ' ') return 1;	/* single zero */
;;;368    			if (c < '0' || c > '9') return 0;	/* invalid char */
;;;369    			r = 8;		/* octal */
;;;370    		}
;;;371    	} else {
;;;372    		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
000024  f1a20330          SUB      r3,r2,#0x30
000028  2b0a              CMP      r3,#0xa
00002a  d229              BCS      |L2.128|
;;;373    		r = 10;			/* decimal */
00002c  230a              MOVS     r3,#0xa
                  |L2.46|
;;;374    	}
;;;375    
;;;376    	val = 0;
00002e  2400              MOVS     r4,#0
;;;377    	while (c > ' ') {
000030  e02e              B        |L2.144|
                  |L2.50|
000032  6804              LDR      r4,[r0,#0]            ;358
000034  1c64              ADDS     r4,r4,#1              ;358
000036  6004              STR      r4,[r0,#0]            ;358
000038  7822              LDRB     r2,[r4,#0]            ;358
00003a  2a62              CMP      r2,#0x62              ;359
00003c  d007              BEQ      |L2.78|
00003e  2a78              CMP      r2,#0x78              ;359
000040  d003              BEQ      |L2.74|
000042  2a20              CMP      r2,#0x20              ;367
000044  d808              BHI      |L2.88|
                  |L2.70|
000046  2001              MOVS     r0,#1                 ;367
;;;378    		if (c >= 'a') c -= 0x20;
;;;379    		c -= '0';
;;;380    		if (c >= 17) {
;;;381    			c -= 7;
;;;382    			if (c <= 9) return 0;	/* invalid char */
;;;383    		}
;;;384    		if (c >= r) return 0;		/* invalid char for current radix */
;;;385    		val = val * r + c;
;;;386    		c = *(++(*str));
;;;387    	}
;;;388    	if (s) val = 0 - val;			/* apply sign if needed */
;;;389    
;;;390    	*res = val;
;;;391    	return 1;
;;;392    }
000048  bd30              POP      {r4,r5,pc}
                  |L2.74|
00004a  2310              MOVS     r3,#0x10              ;361
00004c  e000              B        |L2.80|
                  |L2.78|
00004e  2302              MOVS     r3,#2                 ;364
                  |L2.80|
000050  1c64              ADDS     r4,r4,#1              ;364
000052  6004              STR      r4,[r0,#0]            ;364
000054  7822              LDRB     r2,[r4,#0]            ;364
000056  e7ea              B        |L2.46|
                  |L2.88|
000058  f1a20330          SUB      r3,r2,#0x30           ;368
00005c  2b0a              CMP      r3,#0xa               ;368
00005e  d20f              BCS      |L2.128|
000060  2308              MOVS     r3,#8                 ;369
000062  e7e4              B        |L2.46|
                  |L2.100|
000064  2a61              CMP      r2,#0x61              ;378
000066  d301              BCC      |L2.108|
000068  3a20              SUBS     r2,r2,#0x20           ;378
00006a  b2d2              UXTB     r2,r2                 ;378
                  |L2.108|
00006c  3a30              SUBS     r2,r2,#0x30           ;378
00006e  b2d2              UXTB     r2,r2                 ;379
000070  2a11              CMP      r2,#0x11              ;380
000072  d303              BCC      |L2.124|
000074  1fd2              SUBS     r2,r2,#7              ;380
000076  b2d2              UXTB     r2,r2                 ;381
000078  2a09              CMP      r2,#9                 ;382
00007a  d901              BLS      |L2.128|
                  |L2.124|
00007c  429a              CMP      r2,r3                 ;384
00007e  d301              BCC      |L2.132|
                  |L2.128|
000080  2000              MOVS     r0,#0                 ;384
000082  bd30              POP      {r4,r5,pc}
                  |L2.132|
000084  fb042403          MLA      r4,r4,r3,r2           ;385
000088  6802              LDR      r2,[r0,#0]            ;386
00008a  1c52              ADDS     r2,r2,#1              ;386
00008c  6002              STR      r2,[r0,#0]            ;386
00008e  7812              LDRB     r2,[r2,#0]            ;386
                  |L2.144|
000090  2a20              CMP      r2,#0x20              ;377
000092  d8e7              BHI      |L2.100|
000094  b105              CBZ      r5,|L2.152|
000096  4264              RSBS     r4,r4,#0              ;388
                  |L2.152|
000098  600c              STR      r4,[r1,#0]            ;391
00009a  e7d4              B        |L2.70|
;;;393    
                          ENDP


                          AREA ||i.xfgets||, CODE, READONLY, ALIGN=2

                  xfgets PROC
;;;307    
;;;308    int xfgets (	/* 0:End of stream, 1:A line arrived */
000000  b570              PUSH     {r4-r6,lr}
;;;309    	unsigned char (*func)(void),	/* Pointer to the input stream function */
;;;310    	char* buff,	/* Pointer to the buffer */
;;;311    	int len		/* Buffer length */
;;;312    )
;;;313    {
;;;314    	unsigned char (*pf)(void);
;;;315    	int n;
;;;316    
;;;317    
;;;318    	pf = xfunc_in;			/* Save current input device */
000002  4c05              LDR      r4,|L3.24|
000004  460b              MOV      r3,r1                 ;313
;;;319    	xfunc_in = func;		/* Switch input to specified device */
;;;320    	n = xgets(buff, len);	/* Get a line */
000006  4611              MOV      r1,r2
000008  68a5              LDR      r5,[r4,#8]            ;319  ; xfunc_in
00000a  60a0              STR      r0,[r4,#8]  ; xfunc_in
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       xgets
;;;321    	xfunc_in = pf;			/* Restore input device */
000012  60a5              STR      r5,[r4,#8]  ; xfunc_in
;;;322    
;;;323    	return n;
;;;324    }
000014  bd70              POP      {r4-r6,pc}
;;;325    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      ||.data||

                          AREA ||i.xfprintf||, CODE, READONLY, ALIGN=2

                  xfprintf PROC
;;;198    
;;;199    void xfprintf (					/* Put a formatted string to the specified device */
000000  b40f              PUSH     {r0-r3}
;;;200    	void(*func)(unsigned char),	/* Pointer to the output function */
;;;201    	const char*	fmt,			/* Pointer to the format string */
;;;202    	...							/* Optional arguments */
;;;203    )
;;;204    {
000002  b570              PUSH     {r4-r6,lr}
;;;205    	va_list arp;
;;;206    	void (*pf)(unsigned char);
;;;207    
;;;208    
;;;209    	pf = xfunc_out;		/* Save current output device */
000004  4c05              LDR      r4,|L4.28|
;;;210    	xfunc_out = func;	/* Switch output to specified device */
;;;211    
;;;212    	va_start(arp, fmt);
000006  a906              ADD      r1,sp,#0x18
000008  6825              LDR      r5,[r4,#0]            ;210  ; xfunc_out
;;;213    	xvprintf(fmt, arp);
00000a  6020              STR      r0,[r4,#0]  ; xfunc_out
00000c  9805              LDR      r0,[sp,#0x14]
00000e  f7fffffe          BL       xvprintf
;;;214    	va_end(arp);
;;;215    
;;;216    	xfunc_out = pf;		/* Restore output device */
000012  6025              STR      r5,[r4,#0]  ; xfunc_out
;;;217    }
000014  bc70              POP      {r4-r6}
000016  f85dfb14          LDR      pc,[sp],#0x14
;;;218    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      ||.data||

                          AREA ||i.xfputs||, CODE, READONLY, ALIGN=2

                  xfputs PROC
;;;52     
;;;53     void xfputs (					/* Put a string to the specified device */
000000  b570              PUSH     {r4-r6,lr}
;;;54     	void(*func)(unsigned char),	/* Pointer to the output function */
;;;55     	const char*	str				/* Pointer to the string */
;;;56     )
;;;57     {
;;;58     	void (*pf)(unsigned char);
;;;59     
;;;60     
;;;61     	pf = xfunc_out;		/* Save current output device */
000002  4d06              LDR      r5,|L5.28|
000004  460c              MOV      r4,r1                 ;57
;;;62     	xfunc_out = func;	/* Switch output to specified device */
000006  682e              LDR      r6,[r5,#0]  ; xfunc_out
000008  6028              STR      r0,[r5,#0]            ;57  ; xfunc_out
00000a  e002              B        |L5.18|
                  |L5.12|
00000c  1c64              ADDS     r4,r4,#1              ;57
;;;63     	while (*str)		/* Put the string */
;;;64     		xputc(*str++);
00000e  f7fffffe          BL       xputc
                  |L5.18|
000012  7820              LDRB     r0,[r4,#0]            ;63
000014  2800              CMP      r0,#0                 ;63
000016  d1f9              BNE      |L5.12|
;;;65     	xfunc_out = pf;		/* Restore output device */
000018  602e              STR      r6,[r5,#0]  ; xfunc_out
;;;66     }
00001a  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  |L5.28|
                          DCD      ||.data||

                          AREA ||i.xgets||, CODE, READONLY, ALIGN=2

                  xgets PROC
;;;276    
;;;277    int xgets (		/* 0:End of stream, 1:A line arrived */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;278    	char* buff,	/* Pointer to the buffer */
;;;279    	int len		/* Buffer length */
;;;280    )
;;;281    {
;;;282    	int c, i;
;;;283    
;;;284    
;;;285    	if (!xfunc_in) return 0;		/* No input function specified */
000004  4e12              LDR      r6,|L6.80|
000006  4607              MOV      r7,r0                 ;281
000008  68b0              LDR      r0,[r6,#8]            ;281  ; xfunc_in
00000a  2800              CMP      r0,#0                 ;281
00000c  d01e              BEQ      |L6.76|
;;;286    
;;;287    	i = 0;
00000e  2400              MOVS     r4,#0
;;;288    	for (;;) {
;;;289    		c = xfunc_in();				/* Get a char from the incoming stream */
;;;290    		if (!c) return 0;			/* End of stream? */
;;;291    		if (c == '\r') break;		/* End of line? */
;;;292    		if (c == '\b' && i) {		/* Back space? */
;;;293    			i--;
;;;294    			if (_LINE_ECHO) xputc(c);
;;;295    			continue;
;;;296    		}
;;;297    		if (c >= ' ' && i < len - 1) {	/* Visible chars */
000010  1e4d              SUBS     r5,r1,#1
                  |L6.18|
000012  68b0              LDR      r0,[r6,#8]            ;289  ; xfunc_in
000014  4780              BLX      r0                    ;289
000016  2800              CMP      r0,#0                 ;290
000018  d018              BEQ      |L6.76|
00001a  280d              CMP      r0,#0xd               ;291
00001c  d010              BEQ      |L6.64|
00001e  2808              CMP      r0,#8                 ;292
000020  d009              BEQ      |L6.54|
000022  2820              CMP      r0,#0x20
000024  dbf5              BLT      |L6.18|
000026  42ac              CMP      r4,r5
000028  daf3              BGE      |L6.18|
;;;298    			buff[i++] = c;
00002a  b2c0              UXTB     r0,r0
00002c  5538              STRB     r0,[r7,r4]
00002e  1c64              ADDS     r4,r4,#1
                  |L6.48|
;;;299    			if (_LINE_ECHO) xputc(c);
000030  f7fffffe          BL       xputc
000034  e7ed              B        |L6.18|
                  |L6.54|
000036  2c00              CMP      r4,#0                 ;292
000038  d0eb              BEQ      |L6.18|
00003a  2008              MOVS     r0,#8                 ;294
00003c  1e64              SUBS     r4,r4,#1              ;294
00003e  e7f7              B        |L6.48|
                  |L6.64|
;;;300    		}
;;;301    	}
;;;302    	buff[i] = 0;	/* Terminate with a \0 */
000040  2000              MOVS     r0,#0
000042  5538              STRB     r0,[r7,r4]
;;;303    	if (_LINE_ECHO) xputc('\n');
000044  200a              MOVS     r0,#0xa
000046  f7fffffe          BL       xputc
;;;304    	return 1;
00004a  2001              MOVS     r0,#1
                  |L6.76|
;;;305    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;306    
                          ENDP

                  |L6.80|
                          DCD      ||.data||

                          AREA ||i.xprintf||, CODE, READONLY, ALIGN=1

                  xprintf PROC
;;;164    
;;;165    void xprintf (			/* Put a formatted string to the default device */
000000  b40f              PUSH     {r0-r3}
;;;166    	const char*	fmt,	/* Pointer to the format string */
;;;167    	...					/* Optional arguments */
;;;168    )
;;;169    {
000002  b510              PUSH     {r4,lr}
;;;170    	va_list arp;
;;;171    
;;;172    
;;;173    	va_start(arp, fmt);
000004  a903              ADD      r1,sp,#0xc
;;;174    	xvprintf(fmt, arp);
000006  9802              LDR      r0,[sp,#8]
000008  f7fffffe          BL       xvprintf
;;;175    	va_end(arp);
;;;176    }
00000c  bc10              POP      {r4}
00000e  f85dfb14          LDR      pc,[sp],#0x14
;;;177    
                          ENDP


                          AREA ||i.xputc||, CODE, READONLY, ALIGN=2

                  xputc PROC
;;;25     
;;;26     void xputc (char c)
000000  b510              PUSH     {r4,lr}
;;;27     {
000002  4604              MOV      r4,r0
;;;28     	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
000004  280a              CMP      r0,#0xa
000006  d102              BNE      |L8.14|
000008  200d              MOVS     r0,#0xd
00000a  f7fffffe          BL       xputc
                  |L8.14|
;;;29     
;;;30     	if (outptr) {
00000e  4907              LDR      r1,|L8.44|
000010  684a              LDR      r2,[r1,#4]  ; outptr
000012  b11a              CBZ      r2,|L8.28|
;;;31     		*outptr++ = (unsigned char)c;
000014  f8024b01          STRB     r4,[r2],#1
;;;32     		return;
000018  604a              STR      r2,[r1,#4]  ; outptr
                  |L8.26|
;;;33     	}
;;;34     
;;;35     	if (xfunc_out) xfunc_out((unsigned char)c);
;;;36     }
00001a  bd10              POP      {r4,pc}
                  |L8.28|
00001c  6809              LDR      r1,[r1,#0]            ;35  ; xfunc_out
00001e  2900              CMP      r1,#0                 ;35
000020  d0fb              BEQ      |L8.26|
000022  4620              MOV      r0,r4                 ;35
000024  e8bd4010          POP      {r4,lr}               ;35
000028  4708              BX       r1                    ;35
;;;37     
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      ||.data||

                          AREA ||i.xputs||, CODE, READONLY, ALIGN=1

                  xputs PROC
;;;43     
;;;44     void xputs (					/* Put a string to the default device */
000000  b510              PUSH     {r4,lr}
;;;45     	const char* str				/* Pointer to the string */
;;;46     )
;;;47     {
000002  4604              MOV      r4,r0
;;;48     	while (*str)
;;;49     		xputc(*str++);
000004  e002              B        |L9.12|
                  |L9.6|
000006  1c64              ADDS     r4,r4,#1
000008  f7fffffe          BL       xputc
                  |L9.12|
00000c  7820              LDRB     r0,[r4,#0]            ;48
00000e  2800              CMP      r0,#0                 ;48
000010  d1f9              BNE      |L9.6|
;;;50     }
000012  bd10              POP      {r4,pc}
;;;51     
                          ENDP


                          AREA ||i.xsprintf||, CODE, READONLY, ALIGN=2

                  xsprintf PROC
;;;178    
;;;179    void xsprintf (			/* Put a formatted string to the memory */
000000  b40f              PUSH     {r0-r3}
;;;180    	char* buff,			/* Pointer to the output buffer */
;;;181    	const char*	fmt,	/* Pointer to the format string */
;;;182    	...					/* Optional arguments */
;;;183    )
;;;184    {
000002  b510              PUSH     {r4,lr}
;;;185    	va_list arp;
;;;186    
;;;187    
;;;188    	outptr = buff;		/* Switch destination for memory */
000004  4c06              LDR      r4,|L10.32|
;;;189    
;;;190    	va_start(arp, fmt);
000006  a904              ADD      r1,sp,#0x10
;;;191    	xvprintf(fmt, arp);
000008  6060              STR      r0,[r4,#4]  ; outptr
00000a  9803              LDR      r0,[sp,#0xc]
00000c  f7fffffe          BL       xvprintf
;;;192    	va_end(arp);
;;;193    
;;;194    	*outptr = 0;		/* Terminate output string with a \0 */
000010  6861              LDR      r1,[r4,#4]  ; outptr
000012  2000              MOVS     r0,#0                 ;192
000014  7008              STRB     r0,[r1,#0]
;;;195    	outptr = 0;			/* Switch destination for device */
000016  6060              STR      r0,[r4,#4]  ; outptr
;;;196    }
000018  bc10              POP      {r4}
00001a  f85dfb14          LDR      pc,[sp],#0x14
;;;197    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      ||.data||

                          AREA ||i.xvprintf||, CODE, READONLY, ALIGN=2

                  xvprintf PROC
;;;87     static
;;;88     void xvprintf (
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;89     	const char*	fmt,	/* Pointer to the format string */
;;;90     	va_list arp			/* Pointer to arguments */
;;;91     )
;;;92     {
000004  468a              MOV      r10,r1
000006  4605              MOV      r5,r0
;;;93     	unsigned int r, i, j, w, f;
;;;94     	unsigned long v;
;;;95     	char s[16], c, d, *p;
000008  ea4f090d          MOV.W    r9,sp
                  |L11.12|
;;;96     
;;;97     
;;;98     	for (;;) {
;;;99     		c = *fmt++;					/* Get a char */
00000c  f8150b01          LDRB     r0,[r5],#1
;;;100    		if (!c) break;				/* End of format? */
000010  2800              CMP      r0,#0
000012  d06f              BEQ      |L11.244|
;;;101    		if (c != '%') {				/* Pass through it if not a % sequense */
000014  2825              CMP      r0,#0x25
000016  d002              BEQ      |L11.30|
                  |L11.24|
;;;102    			xputc(c); continue;
000018  f7fffffe          BL       xputc
00001c  e7f6              B        |L11.12|
                  |L11.30|
;;;103    		}
;;;104    		f = 0;
;;;105    		c = *fmt++;					/* Get first char of the sequense */
00001e  f8150b01          LDRB     r0,[r5],#1
000022  f04f0800          MOV      r8,#0                 ;104
;;;106    		if (c == '0') {				/* Flag: '0' padded */
000026  2830              CMP      r0,#0x30
000028  d002              BEQ      |L11.48|
;;;107    			f = 1; c = *fmt++;
;;;108    		} else {
;;;109    			if (c == '-') {			/* Flag: left justified */
00002a  282d              CMP      r0,#0x2d
00002c  d002              BEQ      |L11.52|
00002e  e005              B        |L11.60|
                  |L11.48|
000030  2001              MOVS     r0,#1                 ;107
000032  e000              B        |L11.54|
                  |L11.52|
;;;110    				f = 2; c = *fmt++;
000034  2002              MOVS     r0,#2
                  |L11.54|
000036  4680              MOV      r8,r0
000038  f8150b01          LDRB     r0,[r5],#1
                  |L11.60|
;;;111    			}
;;;112    		}
;;;113    		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
00003c  2600              MOVS     r6,#0
00003e  e006              B        |L11.78|
                  |L11.64|
;;;114    			w = w * 10 + c - '0';
000040  eb060186          ADD      r1,r6,r6,LSL #2
000044  eb000641          ADD      r6,r0,r1,LSL #1
000048  f8150b01          LDRB     r0,[r5],#1            ;113
00004c  3e30              SUBS     r6,r6,#0x30           ;113
                  |L11.78|
00004e  f1a00130          SUB      r1,r0,#0x30           ;113
000052  2909              CMP      r1,#9                 ;113
000054  d9f4              BLS      |L11.64|
;;;115    		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
000056  286c              CMP      r0,#0x6c
000058  d001              BEQ      |L11.94|
00005a  284c              CMP      r0,#0x4c
00005c  d103              BNE      |L11.102|
                  |L11.94|
;;;116    			f |= 4; c = *fmt++;
00005e  f8150b01          LDRB     r0,[r5],#1
000062  f0480804          ORR      r8,r8,#4
                  |L11.102|
;;;117    		}
;;;118    		if (!c) break;				/* End of format? */
000066  2800              CMP      r0,#0
000068  d044              BEQ      |L11.244|
;;;119    		d = c;
00006a  4602              MOV      r2,r0
;;;120    		if (d >= 'a') d -= 0x20;
00006c  2861              CMP      r0,#0x61
00006e  d301              BCC      |L11.116|
000070  3a20              SUBS     r2,r2,#0x20
000072  b2d2              UXTB     r2,r2
                  |L11.116|
;;;121    		switch (d) {				/* Type is... */
000074  2a4f              CMP      r2,#0x4f
000076  d03e              BEQ      |L11.246|
000078  dc06              BGT      |L11.136|
00007a  2a42              CMP      r2,#0x42
00007c  d038              BEQ      |L11.240|
00007e  2a43              CMP      r2,#0x43
000080  d033              BEQ      |L11.234|
000082  2a44              CMP      r2,#0x44
000084  d1c8              BNE      |L11.24|
000086  e038              B        |L11.250|
                  |L11.136|
000088  2a53              CMP      r2,#0x53
00008a  d00f              BEQ      |L11.172|
00008c  2a55              CMP      r2,#0x55
00008e  d034              BEQ      |L11.250|
000090  2a58              CMP      r2,#0x58
000092  d1c1              BNE      |L11.24|
;;;122    		case 'S' :					/* String */
;;;123    			p = va_arg(arp, char*);
;;;124    			for (j = 0; p[j]; j++) ;
;;;125    			while (!(f & 2) && j++ < w) xputc(' ');
;;;126    			xputs(p);
;;;127    			while (j++ < w) xputc(' ');
;;;128    			continue;
;;;129    		case 'C' :					/* Character */
;;;130    			xputc((char)va_arg(arp, int)); continue;
;;;131    		case 'B' :					/* Binary */
;;;132    			r = 2; break;
;;;133    		case 'O' :					/* Octal */
;;;134    			r = 8; break;
;;;135    		case 'D' :					/* Signed decimal */
;;;136    		case 'U' :					/* Unsigned decimal */
;;;137    			r = 10; break;
;;;138    		case 'X' :					/* Hexdecimal */
;;;139    			r = 16; break;
000094  f05f0310          MOVS.W   r3,#0x10
                  |L11.152|
;;;140    		default:					/* Unknown type (passthrough) */
;;;141    			xputc(c); continue;
;;;142    		}
;;;143    
;;;144    		/* Get an argument and put it in numeral */
;;;145    		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
000098  ea5f7148          LSLS     r1,r8,#29
00009c  d401              BMI      |L11.162|
00009e  2a44              CMP      r2,#0x44
0000a0  d02d              BEQ      |L11.254|
                  |L11.162|
0000a2  f85a1b04          LDR      r1,[r10],#4
;;;146    		if (d == 'D' && (v & 0x80000000)) {
0000a6  2a44              CMP      r2,#0x44
0000a8  d02b              BEQ      |L11.258|
0000aa  e02f              B        |L11.268|
                  |L11.172|
0000ac  f85a7b04          LDR      r7,[r10],#4           ;123
0000b0  2400              MOVS     r4,#0                 ;124
0000b2  e000              B        |L11.182|
                  |L11.180|
0000b4  1c64              ADDS     r4,r4,#1              ;124
                  |L11.182|
0000b6  5d38              LDRB     r0,[r7,r4]            ;124
0000b8  2800              CMP      r0,#0                 ;124
0000ba  d1fb              BNE      |L11.180|
0000bc  e002              B        |L11.196|
                  |L11.190|
0000be  2020              MOVS     r0,#0x20              ;125
0000c0  f7fffffe          BL       xputc
                  |L11.196|
0000c4  ea5f7088          LSLS     r0,r8,#30             ;125
0000c8  d403              BMI      |L11.210|
0000ca  4620              MOV      r0,r4                 ;125
0000cc  1c64              ADDS     r4,r4,#1              ;125
0000ce  42b0              CMP      r0,r6                 ;125
0000d0  d3f5              BCC      |L11.190|
                  |L11.210|
0000d2  4638              MOV      r0,r7                 ;126
0000d4  f7fffffe          BL       xputs
0000d8  e002              B        |L11.224|
                  |L11.218|
0000da  2020              MOVS     r0,#0x20              ;127
0000dc  f7fffffe          BL       xputc
                  |L11.224|
0000e0  4620              MOV      r0,r4                 ;127
0000e2  1c64              ADDS     r4,r4,#1              ;127
0000e4  42b0              CMP      r0,r6                 ;127
                  |L11.230|
0000e6  d291              BCS      |L11.12|
0000e8  e7f7              B        |L11.218|
                  |L11.234|
0000ea  f81a0b04          LDRB     r0,[r10],#4           ;130
0000ee  e793              B        |L11.24|
                  |L11.240|
0000f0  2302              MOVS     r3,#2                 ;132
0000f2  e7d1              B        |L11.152|
                  |L11.244|
0000f4  e04e              B        |L11.404|
                  |L11.246|
0000f6  2308              MOVS     r3,#8                 ;134
0000f8  e7ce              B        |L11.152|
                  |L11.250|
0000fa  230a              MOVS     r3,#0xa               ;137
0000fc  e7cc              B        |L11.152|
                  |L11.254|
0000fe  f85a1b04          LDR      r1,[r10],#4           ;145
                  |L11.258|
000102  2900              CMP      r1,#0
000104  da02              BGE      |L11.268|
;;;147    			v = 0 - v;
000106  4249              RSBS     r1,r1,#0
;;;148    			f |= 8;
000108  f0480808          ORR      r8,r8,#8
                  |L11.268|
;;;149    		}
;;;150    		i = 0;
00010c  2400              MOVS     r4,#0
00010e  464f              MOV      r7,r9                 ;95
                  |L11.272|
;;;151    		do {
;;;152    			d = (char)(v % r); v /= r;
000110  fbb1f2f3          UDIV     r2,r1,r3
000114  fb031212          MLS      r2,r3,r2,r1
000118  fbb1f1f3          UDIV     r1,r1,r3
00011c  b2d2              UXTB     r2,r2
;;;153    			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
00011e  2a09              CMP      r2,#9
000120  d905              BLS      |L11.302|
000122  2878              CMP      r0,#0x78
000124  d016              BEQ      |L11.340|
000126  f04f0c07          MOV      r12,#7
                  |L11.298|
00012a  4462              ADD      r2,r2,r12
00012c  b2d2              UXTB     r2,r2
                  |L11.302|
00012e  3230              ADDS     r2,r2,#0x30
;;;154    			s[i++] = d + '0';
000130  553a              STRB     r2,[r7,r4]
000132  1c64              ADDS     r4,r4,#1
;;;155    		} while (v && i < sizeof(s));
000134  b109              CBZ      r1,|L11.314|
000136  2c10              CMP      r4,#0x10
000138  d3ea              BCC      |L11.272|
                  |L11.314|
;;;156    		if (f & 8) s[i++] = '-';
00013a  ea5f7008          LSLS     r0,r8,#28
00013e  d503              BPL      |L11.328|
000140  202d              MOVS     r0,#0x2d
000142  f8090004          STRB     r0,[r9,r4]
000146  1c64              ADDS     r4,r4,#1
                  |L11.328|
;;;157    		j = i; d = (f & 1) ? '0' : ' ';
000148  4627              MOV      r7,r4
00014a  ea5f70c8          LSLS     r0,r8,#31
00014e  d004              BEQ      |L11.346|
000150  2030              MOVS     r0,#0x30
000152  e003              B        |L11.348|
                  |L11.340|
000154  f04f0c27          MOV      r12,#0x27             ;153
000158  e7e7              B        |L11.298|
                  |L11.346|
00015a  2020              MOVS     r0,#0x20
                  |L11.348|
00015c  4683              MOV      r11,r0
;;;158    		while (!(f & 2) && j++ < w) xputc(d);
00015e  e002              B        |L11.358|
                  |L11.352|
000160  4658              MOV      r0,r11
000162  f7fffffe          BL       xputc
                  |L11.358|
000166  ea5f7088          LSLS     r0,r8,#30
00016a  d403              BMI      |L11.372|
00016c  4638              MOV      r0,r7
00016e  1c7f              ADDS     r7,r7,#1
000170  42b0              CMP      r0,r6
000172  d3f5              BCC      |L11.352|
                  |L11.372|
000174  1e64              SUBS     r4,r4,#1
;;;159    		do xputc(s[--i]); while(i);
000176  f8190004          LDRB     r0,[r9,r4]
00017a  f7fffffe          BL       xputc
00017e  2c00              CMP      r4,#0
000180  d1f8              BNE      |L11.372|
000182  e002              B        |L11.394|
                  |L11.388|
;;;160    		while (j++ < w) xputc(' ');
000184  2020              MOVS     r0,#0x20
000186  f7fffffe          BL       xputc
                  |L11.394|
00018a  4638              MOV      r0,r7
00018c  1c7f              ADDS     r7,r7,#1
00018e  42b0              CMP      r0,r6
000190  d2a9              BCS      |L11.230|
000192  e7f7              B        |L11.388|
                  |L11.404|
;;;161    	}
;;;162    }
000194  e8bd9fff          POP      {r0-r12,pc}
;;;163    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  xfunc_out
                          DCD      0x00000000
                  outptr
                          DCD      0x00000000
                  xfunc_in
                          DCD      0x00000000
